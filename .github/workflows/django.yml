name: attendance-server-deploy1

on:
  push:
    branches: [master]

jobs:
  build-and-deploy:
    if: contains(github.event.head_commit.message, 'please build')
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run setup on server via SSH (Create venv and install dependencies)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/pratik/githubaction_prac/attendance-server-master/attendance-server
            python3.8 -m venv git
            source git/bin/activate

            python -m pip install --upgrade pip
            pip install -r requirements.txt

            python manage.py collectstatic --noinput
            python manage.py makemigrations
            python manage.py migrate

            python manage.py shell << EOF
            from django.contrib.auth import get_user_model
            User = get_user_model()
            username = '${{ secrets.DJANGO_SUPERUSER_USERNAME }}'
            email = '${{ secrets.DJANGO_SUPERUSER_EMAIL }}'
            password = '${{ secrets.DJANGO_SUPERUSER_PASSWORD }}'
            if not User.objects.filter(username=username).exists():
                User.objects.create_superuser(username=username, email=email, password=password) 
            EOF

            pkill gunicorn || true
            gunicorn --bind 0.0.0.0:8000 main.wsgi:application --workers 3 --daemon

      - name: Deploy and run Nginx via Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          port: ${{ secrets.SERVER_PORT }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
           docker pull ${{ secrets.DOCKER_USERNAME }}/nginx-app:latest
           docker stop nginx-container || true
           docker rm nginx-container || true
           docker run -d --name nginx-container -p 8080:80 \
            ${{ secrets.DOCKER_USERNAME }}/nginx-app:latest